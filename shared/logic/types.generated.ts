// ‼️ Generated via scripts/generate-shared-types.ts. Do not edit this file manually.

import { z } from 'zod';

import { type ActionEventFromAction } from './types';

import type Game from './Game';
import type WorkingClassRole from './roles/WorkingClassRole';
import type MiddleClassRole from './roles/MiddleClassRole';
import type CapitalistRole from './roles/CapitalistRole';
import type StateRole from './roles/StateRole';

export type AnyActionEvent = ActionEventMap[keyof ActionEventMap];

export type ActionEventName = keyof ActionEventMap;

export const actionEventNameSchema = z.enum([
    'game:start',
    'game:roundStart',
    'game:turnStart',
    'game:roleNext',
    'game:roleTurn',
    'game:roleCurrent',
    'game:turnEnd',
    'game:roundEnd',
    'game:end',
    'workingClass:proposeBill',
    'workingClass:assignWorkers',
    'workingClass:buyGoodsAndServices',
    'workingClass:strike',
    'workingClass:demonstration',
    'workingClass:applyPoliticalPressure',
    'workingClass:skip',
    'workingClass:useHealthcare',
    'workingClass:useEducation',
    'workingClass:useLuxury',
    'workingClass:swapWorkers',
    'workingClass:receiveBenefits',
    'workingClass:payLoan',
    'middleClass:proposeBill',
    'middleClass:assignWorkers',
    'middleClass:buildCompany',
    'middleClass:sellCompany',
    'middleClass:sellToForeignMarket',
    'middleClass:buyGoodsAndServices',
    'middleClass:extraShift',
    'middleClass:applyPoliticalPressure',
    'middleClass:skip',
    'middleClass:useHealthcare',
    'middleClass:useEducation',
    'middleClass:useLuxury',
    'middleClass:adjustPrices',
    'middleClass:adjustWages',
    'middleClass:swapWorkers',
    'middleClass:receiveBenefits',
    'middleClass:payLoan',
    'capitalist:proposeBill',
    'capitalist:buildCompany',
    'capitalist:sellCompany',
    'capitalist:sellToForeignMarket',
    'capitalist:makeBusinessDeal',
    'capitalist:lobby',
    'capitalist:applyPoliticalPressure',
    'capitalist:skip',
    'capitalist:adjustPrices',
    'capitalist:adjustWages',
    'capitalist:giveBonus',
    'capitalist:buyStorage',
    'capitalist:receiveBenefits',
    'capitalist:payLoan',
    'state:proposeBill',
    'state:eventAction',
    'state:sellToForeignMarket',
    'state:meetWithPartyMps',
    'state:extraTax',
    'state:campaign',
    'state:skip',
    'state:adjustWages',
    'state:payLoan',
] as const);

export type ActionEventMap = {
    'game:start': ActionEventFromAction<'game:start', Game['actions']['start']>;
    'game:roundStart': ActionEventFromAction<'game:roundStart', Game['actions']['roundStart']>;
    'game:turnStart': ActionEventFromAction<'game:turnStart', Game['actions']['turnStart']>;
    'game:roleNext': ActionEventFromAction<'game:roleNext', Game['actions']['roleNext']>;
    'game:roleTurn': ActionEventFromAction<'game:roleTurn', Game['actions']['roleTurn']>;
    'game:roleCurrent': ActionEventFromAction<'game:roleCurrent', Game['actions']['roleCurrent']>;
    'game:turnEnd': ActionEventFromAction<'game:turnEnd', Game['actions']['turnEnd']>;
    'game:roundEnd': ActionEventFromAction<'game:roundEnd', Game['actions']['roundEnd']>;
    'game:end': ActionEventFromAction<'game:end', Game['actions']['end']>;
    'workingClass:proposeBill': ActionEventFromAction<
        'workingClass:proposeBill',
        WorkingClassRole['basicActions']['proposeBill']
    >;
    'workingClass:assignWorkers': ActionEventFromAction<
        'workingClass:assignWorkers',
        WorkingClassRole['basicActions']['assignWorkers']
    >;
    'workingClass:buyGoodsAndServices': ActionEventFromAction<
        'workingClass:buyGoodsAndServices',
        WorkingClassRole['basicActions']['buyGoodsAndServices']
    >;
    'workingClass:strike': ActionEventFromAction<
        'workingClass:strike',
        WorkingClassRole['basicActions']['strike']
    >;
    'workingClass:demonstration': ActionEventFromAction<
        'workingClass:demonstration',
        WorkingClassRole['basicActions']['demonstration']
    >;
    'workingClass:applyPoliticalPressure': ActionEventFromAction<
        'workingClass:applyPoliticalPressure',
        WorkingClassRole['basicActions']['applyPoliticalPressure']
    >;
    'workingClass:skip': ActionEventFromAction<
        'workingClass:skip',
        WorkingClassRole['freeActions']['skip']
    >;
    'workingClass:useHealthcare': ActionEventFromAction<
        'workingClass:useHealthcare',
        WorkingClassRole['freeActions']['useHealthcare']
    >;
    'workingClass:useEducation': ActionEventFromAction<
        'workingClass:useEducation',
        WorkingClassRole['freeActions']['useEducation']
    >;
    'workingClass:useLuxury': ActionEventFromAction<
        'workingClass:useLuxury',
        WorkingClassRole['freeActions']['useLuxury']
    >;
    'workingClass:swapWorkers': ActionEventFromAction<
        'workingClass:swapWorkers',
        WorkingClassRole['freeActions']['swapWorkers']
    >;
    'workingClass:receiveBenefits': ActionEventFromAction<
        'workingClass:receiveBenefits',
        WorkingClassRole['freeActions']['receiveBenefits']
    >;
    'workingClass:payLoan': ActionEventFromAction<
        'workingClass:payLoan',
        WorkingClassRole['freeActions']['payLoan']
    >;
    'middleClass:proposeBill': ActionEventFromAction<
        'middleClass:proposeBill',
        MiddleClassRole['basicActions']['proposeBill']
    >;
    'middleClass:assignWorkers': ActionEventFromAction<
        'middleClass:assignWorkers',
        MiddleClassRole['basicActions']['assignWorkers']
    >;
    'middleClass:buildCompany': ActionEventFromAction<
        'middleClass:buildCompany',
        MiddleClassRole['basicActions']['buildCompany']
    >;
    'middleClass:sellCompany': ActionEventFromAction<
        'middleClass:sellCompany',
        MiddleClassRole['basicActions']['sellCompany']
    >;
    'middleClass:sellToForeignMarket': ActionEventFromAction<
        'middleClass:sellToForeignMarket',
        MiddleClassRole['basicActions']['sellToForeignMarket']
    >;
    'middleClass:buyGoodsAndServices': ActionEventFromAction<
        'middleClass:buyGoodsAndServices',
        MiddleClassRole['basicActions']['buyGoodsAndServices']
    >;
    'middleClass:extraShift': ActionEventFromAction<
        'middleClass:extraShift',
        MiddleClassRole['basicActions']['extraShift']
    >;
    'middleClass:applyPoliticalPressure': ActionEventFromAction<
        'middleClass:applyPoliticalPressure',
        MiddleClassRole['basicActions']['applyPoliticalPressure']
    >;
    'middleClass:skip': ActionEventFromAction<
        'middleClass:skip',
        MiddleClassRole['freeActions']['skip']
    >;
    'middleClass:useHealthcare': ActionEventFromAction<
        'middleClass:useHealthcare',
        MiddleClassRole['freeActions']['useHealthcare']
    >;
    'middleClass:useEducation': ActionEventFromAction<
        'middleClass:useEducation',
        MiddleClassRole['freeActions']['useEducation']
    >;
    'middleClass:useLuxury': ActionEventFromAction<
        'middleClass:useLuxury',
        MiddleClassRole['freeActions']['useLuxury']
    >;
    'middleClass:adjustPrices': ActionEventFromAction<
        'middleClass:adjustPrices',
        MiddleClassRole['freeActions']['adjustPrices']
    >;
    'middleClass:adjustWages': ActionEventFromAction<
        'middleClass:adjustWages',
        MiddleClassRole['freeActions']['adjustWages']
    >;
    'middleClass:swapWorkers': ActionEventFromAction<
        'middleClass:swapWorkers',
        MiddleClassRole['freeActions']['swapWorkers']
    >;
    'middleClass:receiveBenefits': ActionEventFromAction<
        'middleClass:receiveBenefits',
        MiddleClassRole['freeActions']['receiveBenefits']
    >;
    'middleClass:payLoan': ActionEventFromAction<
        'middleClass:payLoan',
        MiddleClassRole['freeActions']['payLoan']
    >;
    'capitalist:proposeBill': ActionEventFromAction<
        'capitalist:proposeBill',
        CapitalistRole['basicActions']['proposeBill']
    >;
    'capitalist:buildCompany': ActionEventFromAction<
        'capitalist:buildCompany',
        CapitalistRole['basicActions']['buildCompany']
    >;
    'capitalist:sellCompany': ActionEventFromAction<
        'capitalist:sellCompany',
        CapitalistRole['basicActions']['sellCompany']
    >;
    'capitalist:sellToForeignMarket': ActionEventFromAction<
        'capitalist:sellToForeignMarket',
        CapitalistRole['basicActions']['sellToForeignMarket']
    >;
    'capitalist:makeBusinessDeal': ActionEventFromAction<
        'capitalist:makeBusinessDeal',
        CapitalistRole['basicActions']['makeBusinessDeal']
    >;
    'capitalist:lobby': ActionEventFromAction<
        'capitalist:lobby',
        CapitalistRole['basicActions']['lobby']
    >;
    'capitalist:applyPoliticalPressure': ActionEventFromAction<
        'capitalist:applyPoliticalPressure',
        CapitalistRole['basicActions']['applyPoliticalPressure']
    >;
    'capitalist:skip': ActionEventFromAction<
        'capitalist:skip',
        CapitalistRole['freeActions']['skip']
    >;
    'capitalist:adjustPrices': ActionEventFromAction<
        'capitalist:adjustPrices',
        CapitalistRole['freeActions']['adjustPrices']
    >;
    'capitalist:adjustWages': ActionEventFromAction<
        'capitalist:adjustWages',
        CapitalistRole['freeActions']['adjustWages']
    >;
    'capitalist:giveBonus': ActionEventFromAction<
        'capitalist:giveBonus',
        CapitalistRole['freeActions']['giveBonus']
    >;
    'capitalist:buyStorage': ActionEventFromAction<
        'capitalist:buyStorage',
        CapitalistRole['freeActions']['buyStorage']
    >;
    'capitalist:receiveBenefits': ActionEventFromAction<
        'capitalist:receiveBenefits',
        CapitalistRole['freeActions']['receiveBenefits']
    >;
    'capitalist:payLoan': ActionEventFromAction<
        'capitalist:payLoan',
        CapitalistRole['freeActions']['payLoan']
    >;
    'state:proposeBill': ActionEventFromAction<
        'state:proposeBill',
        StateRole['basicActions']['proposeBill']
    >;
    'state:eventAction': ActionEventFromAction<
        'state:eventAction',
        StateRole['basicActions']['eventAction']
    >;
    'state:sellToForeignMarket': ActionEventFromAction<
        'state:sellToForeignMarket',
        StateRole['basicActions']['sellToForeignMarket']
    >;
    'state:meetWithPartyMps': ActionEventFromAction<
        'state:meetWithPartyMps',
        StateRole['basicActions']['meetWithPartyMps']
    >;
    'state:extraTax': ActionEventFromAction<
        'state:extraTax',
        StateRole['basicActions']['extraTax']
    >;
    'state:campaign': ActionEventFromAction<
        'state:campaign',
        StateRole['basicActions']['campaign']
    >;
    'state:skip': ActionEventFromAction<'state:skip', StateRole['freeActions']['skip']>;
    'state:adjustWages': ActionEventFromAction<
        'state:adjustWages',
        StateRole['freeActions']['adjustWages']
    >;
    'state:payLoan': ActionEventFromAction<'state:payLoan', StateRole['freeActions']['payLoan']>;
};

/** mostly used in testing */
export type PlayerInput = {
    'game:roleTurn': z.infer<NonNullable<Game['actions']['roleTurn']['playerInputSchema']>>;
    'workingClass:proposeBill': z.infer<
        NonNullable<WorkingClassRole['basicActions']['proposeBill']['playerInputSchema']>
    >;
    'workingClass:assignWorkers': z.infer<
        NonNullable<WorkingClassRole['basicActions']['assignWorkers']['playerInputSchema']>
    >;
    'workingClass:buyGoodsAndServices': z.infer<
        NonNullable<WorkingClassRole['basicActions']['buyGoodsAndServices']['playerInputSchema']>
    >;
    'workingClass:strike': z.infer<
        NonNullable<WorkingClassRole['basicActions']['strike']['playerInputSchema']>
    >;
    'workingClass:useEducation': z.infer<
        NonNullable<WorkingClassRole['freeActions']['useEducation']['playerInputSchema']>
    >;
    'workingClass:swapWorkers': z.infer<
        NonNullable<WorkingClassRole['freeActions']['swapWorkers']['playerInputSchema']>
    >;
    'middleClass:proposeBill': z.infer<
        NonNullable<MiddleClassRole['basicActions']['proposeBill']['playerInputSchema']>
    >;
    'middleClass:assignWorkers': z.infer<
        NonNullable<MiddleClassRole['basicActions']['assignWorkers']['playerInputSchema']>
    >;
    'middleClass:buildCompany': z.infer<
        NonNullable<MiddleClassRole['basicActions']['buildCompany']['playerInputSchema']>
    >;
    'middleClass:sellCompany': z.infer<
        NonNullable<MiddleClassRole['basicActions']['sellCompany']['playerInputSchema']>
    >;
    'middleClass:sellToForeignMarket': z.infer<
        NonNullable<MiddleClassRole['basicActions']['sellToForeignMarket']['playerInputSchema']>
    >;
    'middleClass:buyGoodsAndServices': z.infer<
        NonNullable<MiddleClassRole['basicActions']['buyGoodsAndServices']['playerInputSchema']>
    >;
    'middleClass:extraShift': z.infer<
        NonNullable<MiddleClassRole['basicActions']['extraShift']['playerInputSchema']>
    >;
    'middleClass:useEducation': z.infer<
        NonNullable<MiddleClassRole['freeActions']['useEducation']['playerInputSchema']>
    >;
    'middleClass:adjustPrices': z.infer<
        NonNullable<MiddleClassRole['freeActions']['adjustPrices']['playerInputSchema']>
    >;
    'middleClass:adjustWages': z.infer<
        NonNullable<MiddleClassRole['freeActions']['adjustWages']['playerInputSchema']>
    >;
    'middleClass:swapWorkers': z.infer<
        NonNullable<MiddleClassRole['freeActions']['swapWorkers']['playerInputSchema']>
    >;
    'capitalist:proposeBill': z.infer<
        NonNullable<CapitalistRole['basicActions']['proposeBill']['playerInputSchema']>
    >;
    'capitalist:buildCompany': z.infer<
        NonNullable<CapitalistRole['basicActions']['buildCompany']['playerInputSchema']>
    >;
    'capitalist:sellCompany': z.infer<
        NonNullable<CapitalistRole['basicActions']['sellCompany']['playerInputSchema']>
    >;
    'capitalist:sellToForeignMarket': z.infer<
        NonNullable<CapitalistRole['basicActions']['sellToForeignMarket']['playerInputSchema']>
    >;
    'capitalist:makeBusinessDeal': z.infer<
        NonNullable<CapitalistRole['basicActions']['makeBusinessDeal']['playerInputSchema']>
    >;
    'capitalist:adjustPrices': z.infer<
        NonNullable<CapitalistRole['freeActions']['adjustPrices']['playerInputSchema']>
    >;
    'capitalist:adjustWages': z.infer<
        NonNullable<CapitalistRole['freeActions']['adjustWages']['playerInputSchema']>
    >;
    'capitalist:giveBonus': z.infer<
        NonNullable<CapitalistRole['freeActions']['giveBonus']['playerInputSchema']>
    >;
    'capitalist:buyStorage': z.infer<
        NonNullable<CapitalistRole['freeActions']['buyStorage']['playerInputSchema']>
    >;
    'state:proposeBill': z.infer<
        NonNullable<StateRole['basicActions']['proposeBill']['playerInputSchema']>
    >;
    'state:sellToForeignMarket': z.infer<
        NonNullable<StateRole['basicActions']['sellToForeignMarket']['playerInputSchema']>
    >;
    'state:meetWithPartyMps': z.infer<
        NonNullable<StateRole['basicActions']['meetWithPartyMps']['playerInputSchema']>
    >;
    'state:extraTax': z.infer<
        NonNullable<StateRole['basicActions']['extraTax']['playerInputSchema']>
    >;
    'state:campaign': z.infer<
        NonNullable<StateRole['basicActions']['campaign']['playerInputSchema']>
    >;
    'state:adjustWages': z.infer<
        NonNullable<StateRole['freeActions']['adjustWages']['playerInputSchema']>
    >;
};
