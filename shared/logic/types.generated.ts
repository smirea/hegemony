// ‼️ Generated via scripts/generate-shared-types.ts. Do not edit this file manually.

import { z } from 'zod';

import { type ActionEventFromAction } from './types';

import type Game from './Game';
import type WorkingClassRole from './roles/WorkingClassRole';
import type MiddleClassRole from './roles/MiddleClassRole';
import type CapitalistRole from './roles/CapitalistRole';
import type StateRole from './roles/StateRole';

export type AnyActionEvent = ActionEventMap[keyof ActionEventMap];

export type ActionEventName = keyof ActionEventMap;

export const actionEventNameSchema = z.enum([
    'game.actions.start',
    'game.actions.roundStart',
    'game.actions.turnStart',
    'game.actions.roleNext',
    'game.actions.roleTurn',
    'game.actions.roleCurrent',
    'game.actions.turnEnd',
    'game.actions.roundEnd',
    'game.actions.end',
    'workingClass.basicActions.proposeBill',
    'workingClass.basicActions.applyPoliticalPressure',
    'workingClass.basicActions.assignWorkers',
    'workingClass.basicActions.buyGoodsAndServices',
    'workingClass.basicActions.strike',
    'workingClass.basicActions.demonstration',
    'workingClass.freeActions.skip',
    'workingClass.freeActions.payLoan',
    'workingClass.freeActions.useHealthcare',
    'workingClass.freeActions.useEducation',
    'workingClass.freeActions.useLuxury',
    'workingClass.freeActions.swapWorkers',
    'workingClass.freeActions.receiveBenefits',
    'middleClass.basicActions.proposeBill',
    'middleClass.basicActions.applyPoliticalPressure',
    'middleClass.basicActions.buildCompany',
    'middleClass.basicActions.sellCompany',
    'middleClass.basicActions.sellForeignMarketCard',
    'middleClass.basicActions.extraShift',
    'middleClass.freeActions.skip',
    'middleClass.freeActions.payLoan',
    'middleClass.freeActions.useHealthcare',
    'middleClass.freeActions.useEducation',
    'middleClass.freeActions.useLuxury',
    'middleClass.freeActions.swapWorkers',
    'middleClass.freeActions.receiveBenefits',
    'capitalist.basicActions.proposeBill',
    'capitalist.basicActions.buildCompany',
    'capitalist.basicActions.sellCompany',
    'capitalist.basicActions.sellForeignMarketCard',
    'capitalist.basicActions.makeBusinessDeal',
    'capitalist.basicActions.lobby',
    'capitalist.freeActions.skip',
    'capitalist.freeActions.payLoan',
    'capitalist.freeActions.giveBonus',
    'capitalist.freeActions.buyStorage',
    'state.basicActions.proposeBill',
    'state.basicActions.eventAction',
    'state.basicActions.meetWithPartyMps',
    'state.basicActions.extraTax',
    'state.basicActions.campaign',
    'state.freeActions.skip',
    'state.freeActions.payLoan',
] as const);

export type ActionEventMap = {
    'game.actions.start': ActionEventFromAction<'game.actions.start', Game['actions']['start']>;
    'game.actions.roundStart': ActionEventFromAction<
        'game.actions.roundStart',
        Game['actions']['roundStart']
    >;
    'game.actions.turnStart': ActionEventFromAction<
        'game.actions.turnStart',
        Game['actions']['turnStart']
    >;
    'game.actions.roleNext': ActionEventFromAction<
        'game.actions.roleNext',
        Game['actions']['roleNext']
    >;
    'game.actions.roleTurn': ActionEventFromAction<
        'game.actions.roleTurn',
        Game['actions']['roleTurn']
    >;
    'game.actions.roleCurrent': ActionEventFromAction<
        'game.actions.roleCurrent',
        Game['actions']['roleCurrent']
    >;
    'game.actions.turnEnd': ActionEventFromAction<
        'game.actions.turnEnd',
        Game['actions']['turnEnd']
    >;
    'game.actions.roundEnd': ActionEventFromAction<
        'game.actions.roundEnd',
        Game['actions']['roundEnd']
    >;
    'game.actions.end': ActionEventFromAction<'game.actions.end', Game['actions']['end']>;
    'workingClass.basicActions.proposeBill': ActionEventFromAction<
        'workingClass.basicActions.proposeBill',
        WorkingClassRole['basicActions']['proposeBill']
    >;
    'workingClass.basicActions.applyPoliticalPressure': ActionEventFromAction<
        'workingClass.basicActions.applyPoliticalPressure',
        WorkingClassRole['basicActions']['applyPoliticalPressure']
    >;
    'workingClass.basicActions.assignWorkers': ActionEventFromAction<
        'workingClass.basicActions.assignWorkers',
        WorkingClassRole['basicActions']['assignWorkers']
    >;
    'workingClass.basicActions.buyGoodsAndServices': ActionEventFromAction<
        'workingClass.basicActions.buyGoodsAndServices',
        WorkingClassRole['basicActions']['buyGoodsAndServices']
    >;
    'workingClass.basicActions.strike': ActionEventFromAction<
        'workingClass.basicActions.strike',
        WorkingClassRole['basicActions']['strike']
    >;
    'workingClass.basicActions.demonstration': ActionEventFromAction<
        'workingClass.basicActions.demonstration',
        WorkingClassRole['basicActions']['demonstration']
    >;
    'workingClass.freeActions.skip': ActionEventFromAction<
        'workingClass.freeActions.skip',
        WorkingClassRole['freeActions']['skip']
    >;
    'workingClass.freeActions.payLoan': ActionEventFromAction<
        'workingClass.freeActions.payLoan',
        WorkingClassRole['freeActions']['payLoan']
    >;
    'workingClass.freeActions.useHealthcare': ActionEventFromAction<
        'workingClass.freeActions.useHealthcare',
        WorkingClassRole['freeActions']['useHealthcare']
    >;
    'workingClass.freeActions.useEducation': ActionEventFromAction<
        'workingClass.freeActions.useEducation',
        WorkingClassRole['freeActions']['useEducation']
    >;
    'workingClass.freeActions.useLuxury': ActionEventFromAction<
        'workingClass.freeActions.useLuxury',
        WorkingClassRole['freeActions']['useLuxury']
    >;
    'workingClass.freeActions.swapWorkers': ActionEventFromAction<
        'workingClass.freeActions.swapWorkers',
        WorkingClassRole['freeActions']['swapWorkers']
    >;
    'workingClass.freeActions.receiveBenefits': ActionEventFromAction<
        'workingClass.freeActions.receiveBenefits',
        WorkingClassRole['freeActions']['receiveBenefits']
    >;
    'middleClass.basicActions.proposeBill': ActionEventFromAction<
        'middleClass.basicActions.proposeBill',
        MiddleClassRole['basicActions']['proposeBill']
    >;
    'middleClass.basicActions.applyPoliticalPressure': ActionEventFromAction<
        'middleClass.basicActions.applyPoliticalPressure',
        MiddleClassRole['basicActions']['applyPoliticalPressure']
    >;
    'middleClass.basicActions.buildCompany': ActionEventFromAction<
        'middleClass.basicActions.buildCompany',
        MiddleClassRole['basicActions']['buildCompany']
    >;
    'middleClass.basicActions.sellCompany': ActionEventFromAction<
        'middleClass.basicActions.sellCompany',
        MiddleClassRole['basicActions']['sellCompany']
    >;
    'middleClass.basicActions.sellForeignMarketCard': ActionEventFromAction<
        'middleClass.basicActions.sellForeignMarketCard',
        MiddleClassRole['basicActions']['sellForeignMarketCard']
    >;
    'middleClass.basicActions.extraShift': ActionEventFromAction<
        'middleClass.basicActions.extraShift',
        MiddleClassRole['basicActions']['extraShift']
    >;
    'middleClass.freeActions.skip': ActionEventFromAction<
        'middleClass.freeActions.skip',
        MiddleClassRole['freeActions']['skip']
    >;
    'middleClass.freeActions.payLoan': ActionEventFromAction<
        'middleClass.freeActions.payLoan',
        MiddleClassRole['freeActions']['payLoan']
    >;
    'middleClass.freeActions.useHealthcare': ActionEventFromAction<
        'middleClass.freeActions.useHealthcare',
        MiddleClassRole['freeActions']['useHealthcare']
    >;
    'middleClass.freeActions.useEducation': ActionEventFromAction<
        'middleClass.freeActions.useEducation',
        MiddleClassRole['freeActions']['useEducation']
    >;
    'middleClass.freeActions.useLuxury': ActionEventFromAction<
        'middleClass.freeActions.useLuxury',
        MiddleClassRole['freeActions']['useLuxury']
    >;
    'middleClass.freeActions.swapWorkers': ActionEventFromAction<
        'middleClass.freeActions.swapWorkers',
        MiddleClassRole['freeActions']['swapWorkers']
    >;
    'middleClass.freeActions.receiveBenefits': ActionEventFromAction<
        'middleClass.freeActions.receiveBenefits',
        MiddleClassRole['freeActions']['receiveBenefits']
    >;
    'capitalist.basicActions.proposeBill': ActionEventFromAction<
        'capitalist.basicActions.proposeBill',
        CapitalistRole['basicActions']['proposeBill']
    >;
    'capitalist.basicActions.buildCompany': ActionEventFromAction<
        'capitalist.basicActions.buildCompany',
        CapitalistRole['basicActions']['buildCompany']
    >;
    'capitalist.basicActions.sellCompany': ActionEventFromAction<
        'capitalist.basicActions.sellCompany',
        CapitalistRole['basicActions']['sellCompany']
    >;
    'capitalist.basicActions.sellForeignMarketCard': ActionEventFromAction<
        'capitalist.basicActions.sellForeignMarketCard',
        CapitalistRole['basicActions']['sellForeignMarketCard']
    >;
    'capitalist.basicActions.makeBusinessDeal': ActionEventFromAction<
        'capitalist.basicActions.makeBusinessDeal',
        CapitalistRole['basicActions']['makeBusinessDeal']
    >;
    'capitalist.basicActions.lobby': ActionEventFromAction<
        'capitalist.basicActions.lobby',
        CapitalistRole['basicActions']['lobby']
    >;
    'capitalist.freeActions.skip': ActionEventFromAction<
        'capitalist.freeActions.skip',
        CapitalistRole['freeActions']['skip']
    >;
    'capitalist.freeActions.payLoan': ActionEventFromAction<
        'capitalist.freeActions.payLoan',
        CapitalistRole['freeActions']['payLoan']
    >;
    'capitalist.freeActions.giveBonus': ActionEventFromAction<
        'capitalist.freeActions.giveBonus',
        CapitalistRole['freeActions']['giveBonus']
    >;
    'capitalist.freeActions.buyStorage': ActionEventFromAction<
        'capitalist.freeActions.buyStorage',
        CapitalistRole['freeActions']['buyStorage']
    >;
    'state.basicActions.proposeBill': ActionEventFromAction<
        'state.basicActions.proposeBill',
        StateRole['basicActions']['proposeBill']
    >;
    'state.basicActions.eventAction': ActionEventFromAction<
        'state.basicActions.eventAction',
        StateRole['basicActions']['eventAction']
    >;
    'state.basicActions.meetWithPartyMps': ActionEventFromAction<
        'state.basicActions.meetWithPartyMps',
        StateRole['basicActions']['meetWithPartyMps']
    >;
    'state.basicActions.extraTax': ActionEventFromAction<
        'state.basicActions.extraTax',
        StateRole['basicActions']['extraTax']
    >;
    'state.basicActions.campaign': ActionEventFromAction<
        'state.basicActions.campaign',
        StateRole['basicActions']['campaign']
    >;
    'state.freeActions.skip': ActionEventFromAction<
        'state.freeActions.skip',
        StateRole['freeActions']['skip']
    >;
    'state.freeActions.payLoan': ActionEventFromAction<
        'state.freeActions.payLoan',
        StateRole['freeActions']['payLoan']
    >;
};
